<!DOCTYPE html>
<html lang="id">
  <head>
    <meta charset="UTF-8" />
    <title>Aplikasi Chat</title>
    <link
      href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap"
      rel="stylesheet"
    />
    <style>
      * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
      }
      body {
        font-family: "Poppins", Arial, sans-serif;
        display: flex;
        height: 100vh;
        background-color: #f4f4f4;
      }
      .kontak-list {
        width: 300px;
        background-color: white;
        border-right: 1px solid #e0e0e0;
        padding: 20px;
        overflow-y: auto;
      }
      .kontak-list h2 {
        color: #2c3e50;
        margin-bottom: 20px;
        text-align: center;
      }
      #daftar-kontak {
        list-style: none;
      }
      #daftar-kontak li {
        display: flex;
        align-items: center;
        padding: 10px;
        cursor: pointer;
        transition: background-color 0.3s ease;
        border-radius: 8px;
      }
      #daftar-kontak li:hover {
        background-color: #f0f0f0;
      }
      .avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background-color: #3498db;
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-right: 10px;
        font-weight: bold;
      }
      .chat-area {
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        background-color: white;
      }
      #info-penerima {
        padding: 15px;
        background-color: #f9f9f9;
        border-bottom: 1px solid #e0e0e0;
        text-align: center;
        font-weight: 600;
        color: #2c3e50;
      }
      #pesan-container {
        flex-grow: 1;
        overflow-y: auto;
        padding: 20px;
        display: flex;
        flex-direction: column;
      }
      #form-pesan {
        display: flex;
        padding: 15px;
        background-color: #f4f4f4;
      }
      #input-pesan {
        flex-grow: 1;
        margin-right: 10px;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 4px;
      }
      .pesan {
        max-width: 70%;
        margin-bottom: 10px;
        padding: 10px;
        border-radius: 10px;
        position: relative;
      }
      .pesan-saya {
        align-self: flex-end;
        background-color: #3498db;
        color: white;
        margin-left: auto;
      }
      .pesan-kontak {
        align-self: flex-start;
        background-color: #e9ecef;
        color: black;
        margin-right: auto;
      }
      #logout-link {
        display: block;
        margin-top: 20px;
        text-align: left;
        color: #3498db;
        text-decoration: none;
        font-weight: bold;
      }
      #logout-link:hover {
        color: #2c3e50;
      }
      .covers {
        height: calc(100% - 70px);
        display: flex;
        flex-direction: column;
        justify-content: space-between;
      }
    </style>
  </head>
  <body>
    <div class="kontak-list">
      <h2>Kontak</h2>
      <div class="covers">
        <ul id="daftar-kontak">
          <% if (typeof kontaks !== 'undefined' && kontaks.length > 0) { %> <%
          kontaks.forEach(function(kontak) { %>
          <li
            data-id="<%= kontak._id %>"
            onclick="pilihPenerima('<%= kontak._id %>', '<%= kontak.namaLengkap %>')"
          >
            <div class="avatar">
              <%= kontak.namaLengkap.charAt(0).toUpperCase() %>
            </div>
            <%= kontak.namaLengkap %>
          </li>
          <% }); %> <% } else { %>
          <li>Tidak ada kontak</li>
          <% } %>
        </ul>
        <a href="/logout" id="logout-link">Logout</a>
      </div>
    </div>

    <div class="chat-area">
      <div id="info-penerima">Pilih kontak untuk memulai chat</div>
      <div id="pesan-container"></div>
      <form id="form-pesan" style="display: none">
        <input
          type="text"
          id="input-pesan"
          placeholder="Ketik pesan..."
          required
        />
        <button type="submit">Kirim</button>
      </form>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
      // Ambil token dari localStorage atau cookie
      function ambilToken() {
        const tokenFromStorage = localStorage.getItem("token");
        const tokenFromCookie = document.cookie.replace(
          /(?:(?:^|.*;\s*)token\s*\=\s*([^;]*).*$)|^.*$/,
          "$1"
        );

        console.log("Token dari localStorage:", tokenFromStorage);
        console.log("Token dari cookie:", tokenFromCookie);

        return tokenFromStorage || tokenFromCookie;
      }

      const token = ambilToken();
      console.log("Token untuk socket:", token);

      // Konfigurasi socket dengan debugging
      const socket = io({
        auth: {
          token: token,
        },
        reconnection: true,
        reconnectionAttempts: 5,
        reconnectionDelay: 1000,
      });

      // Event listener untuk koneksi
      socket.on("connect", () => {
        console.log("Terhubung ke server socket");
      });

      // Event listener untuk error koneksi
      socket.on("connect_error", (error) => {
        console.error("Kesalahan koneksi socket:", error);
        alert(`Gagal terhubung ke server: ${error.message}`);
      });

      const penggunaId = "<%= pengguna._id %>";
      let penerimaId = null;
      let penerimaNama = null;

      // Fungsi memilih penerima (tetap sama)
      function pilihPenerima(id, nama) {
        penerimaId = id;
        penerimaNama = nama;

        document.getElementById(
          "info-penerima"
        ).innerHTML = `Chat dengan ${nama}`;
        document.getElementById("form-pesan").style.display = "flex";

        muatPesan(id);
      }

      // Modifikasi event listener submit form
      document
        .getElementById("form-pesan")
        .addEventListener("submit", function (e) {
          e.preventDefault();
          const inputPesan = document.getElementById("input-pesan");
          const pesan = inputPesan.value.trim();

          console.log("Mencoba mengirim pesan:", {
            pengirim: penggunaId,
            penerima: penerimaId,
            pesan: pesan,
          });

          if (pesan && penerimaId) {
            // Kirim pesan melalui socket dengan informasi lengkap
            socket.emit("kirim-pesan", {
              pengirim: penggunaId,
              penerima: penerimaId,
              pesan: pesan,
            });

            tambahPesanKeLayar(pesan, true);
            inputPesan.value = ""; // Bersihkan input
          } else {
            console.error("Pesan atau penerima kosong");
          }
        });

      // Event listener untuk pesan baru
      socket.on("pesan-baru", (data) => {
        console.log("Pesan baru diterima:", data);

        // Pastikan pesan dari penerima yang sedang aktif
        if (penerimaId && data.pengirim.toString() === penerimaId) {
          tambahPesanKeLayar(data.pesan, false);
        }
      });

      // Konfirmasi pesan terkirim
      socket.on("pesan-terkirim", (data) => {
        console.log("Pesan berhasil terkirim:", data);
      });

      // Tangani error
      socket.on("error-pesan", (error) => {
        console.error("Gagal mengirim pesan:", error);
        alert("Gagal mengirim pesan: " + error.pesan);
      });

      // Fungsi tambah pesan ke layar (tetap sama)
      function tambahPesanKeLayar(pesan, adalahPengirim) {
        const kontainer = document.getElementById("pesan-container");
        const divPesan = document.createElement("div");
        divPesan.classList.add("pesan");
        divPesan.classList.add(adalahPengirim ? "pesan-saya" : "pesan-kontak");
        divPesan.textContent = pesan;
        kontainer.appendChild(divPesan);
        kontainer.scrollTop = kontainer.scrollHeight;
      }

      // Fungsi muat pesan (tetap sama)
      function muatPesan(penerima) {
        const token = ambilToken();

        fetch(`/pesan/${penerima}`, {
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
        })
          .then((response) => {
            if (!response.ok) {
              throw new Error("Gagal mengambil pesan");
            }
            return response.json();
          })
          .then((pesan) => {
            console.log("Pesan yang diterima:", pesan);
            const kontainer = document.getElementById("pesan-container");
            kontainer.innerHTML = ""; // Bersihkan pesan sebelumnya

            pesan.forEach((p) => {
              const adalahPengirim = p.pengirim.toString() === penggunaId;
              tambahPesanKeLayar(p.pesan, adalahPengirim);
            });
          })
          .catch((error) => {
            console.error("Gagal memuat pesan:", error);
          });
      }
    </script>
  </body>
</html>
